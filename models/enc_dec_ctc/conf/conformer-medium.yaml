# Source: https://github.com/NVIDIA/NeMo/blob/main/examples/asr/conf/conformer/conformer_ctc_char.yaml

####### Train Args #######
vars:
  log_interval: 0.25
  log_sample_predicitons: false

  max_epochs: 200
  train_batch_size: 90
  val_batch_size: 90
  gradient_accumulation: 3

  train_manifest: "../../data/cv-fa-18/train.jsonl"
  val_manifest: "../../data/cv-fa-18/dev.jsonl"

  warmup_epochs: 2
  noam_annealing_lr_coefficient: 0.5

  num_train_workers: 6
  num_val_workers: 6

  min_duration: 0.5
  max_duration: 11
####### Train Args #######

name: "conformer"

model:
  sample_rate: 16000
  labels: [" ", "\u0622", "\u0623", "\u0626", "\u0627", "\u0628", "\u062a", "\u062b", "\u062c", "\u062d", "\u062e", "\u062f", "\u0630", "\u0631", "\u0632", "\u0633", "\u0634", "\u0635", "\u0636", "\u0637", "\u0638", "\u0639", "\u063a", "\u0641", "\u0642", "\u0644", "\u0645", "\u0646", "\u0647", "\u0648", "\u067e", "\u0686", "\u0698", "\u06a9", "\u06af", "\u06cc"]
  log_prediction: ${vars.log_sample_predicitons}
  ctc_reduction: 'mean_batch'
  skip_nan_grad: true

  train_ds:
    manifest_filepath: ${vars.train_manifest}
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: ${vars.train_batch_size}
    shuffle: true
    num_workers: ${vars.num_train_workers}
    pin_memory: true
    trim_silence: false
    max_duration: ${vars.max_duration}
    min_duration: ${vars.min_duration}

    # tarred datasets
    is_tarred: false
    tarred_audio_filepaths: null
    shuffle_n: 2048

    # bucketing params
    bucketing_strategy: "synced_randomized"
    bucketing_batch_size: null

  validation_ds:
    manifest_filepath: ${vars.val_manifest}
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: ${vars.val_batch_size}
    shuffle: false
    use_start_end_token: false
    num_workers: ${vars.num_val_workers}
    pin_memory: false

  preprocessor:
    _target_: nemo.collections.asr.modules.AudioToMelSpectrogramPreprocessor
    sample_rate: ${model.sample_rate}
    normalize: "per_feature" # 'per_feature' (default) or 'all_features'
    window_size: 0.025
    window_stride: 0.01
    window: "hann"
    features: 80
    n_fft: 512
    log: true
    frame_splicing: 1
    dither: 0.00001
    pad_to: 0
    pad_value: 0.0

  spec_augment:
    _target_: nemo.collections.asr.modules.SpectrogramAugmentation
    freq_masks: 2 # Sset to zero to disable it
    time_masks: 10 # Set to zero to disable it
    freq_width: 27
    time_width: 0.05

  encoder:
    _target_: nemo.collections.asr.modules.ConformerEncoder
    feat_in: ${model.preprocessor.features}
    feat_out: -1 # You may set it if you need different output size other than the default d_model
    n_layers: 18
    d_model: 256

    # Sub-sampling params
    subsampling: striding # vggnet, striding, stacking or stacking_norm, dw_striding
    subsampling_factor: 4 # must be power of 2 for striding and vggnet
    subsampling_conv_channels: -1 # set to -1 to make it equal to the d_model
    causal_downsampling: false

    # Feed forward module's params
    ff_expansion_factor: 4

    # Multi-headed Attention Module's params
    self_attention_model: rel_pos # rel_pos or abs_pos
    n_heads: 4 # may need to be lower for smaller d_models
    # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
    att_context_size: [-1, -1] # -1 means unlimited context
    att_context_style: regular # regular or chunked_limited
    xscaling: true # scales up the input embeddings by sqrt(d_model)
    untie_biases: true # unties the biases of the TransformerXL layers
    pos_emb_max_len: 5000

    # Convolution module's params
    conv_kernel_size: 31
    conv_norm_type: 'batch_norm' # batch_norm or layer_norm or groupnormN (N specifies the number of groups)
    # conv_context_size can be"causal" or a list of two integers while conv_context_size[0]+conv_context_size[1]+1==conv_kernel_size
    # null means [(kernel_size-1)//2, (kernel_size-1)//2], and 'causal' means [(kernel_size-1), 0]
    conv_context_size: null

    ### regularization
    dropout: 0.1 # The dropout used in most of the Conformer Modules
    dropout_pre_encoder: 0.1 # The dropout used before the encoder
    dropout_emb: 0.0 # The dropout used for embeddings
    dropout_att: 0.1 # The dropout for multi-headed attention modules

    # set to non-zero to enable stochastic depth
    stochastic_depth_drop_prob: 0.0
    stochastic_depth_mode: linear  # linear or uniform
    stochastic_depth_start_layer: 1

  decoder:
    _target_: nemo.collections.asr.modules.ConvASRDecoder
    feat_in: null
    num_classes: -1
    vocabulary: ${model.labels}

  # config for InterCTC loss: https://arxiv.org/abs/2102.03216
  # specify loss weights and which layers to use for InterCTC
  # e.g., to reproduce the paper results, set loss_weights: [0.3]
  # and apply_at_layers: [8] (assuming 18 layers). Note that final
  # layer loss coefficient is automatically adjusted (to 0.7 in above example)
  interctc:
    loss_weights: []
    apply_at_layers: []

  optim:
    name: adamw
    lr: ${vars.noam_annealing_lr_coefficient}
    betas: [0.9, 0.98] # Optimizer arguments
    # less necessity for weight_decay as we already have large augmentations with SpecAug
    # you may need weight_decay for large models, stable AMP training, small datasets, or when lower augmentations are used
    # weight decay of 0.0 with lr of 2.0 also works fine
    weight_decay: 1e-3

    # scheduler setup
    sched:
      name: NoamAnnealing
      d_model: ${model.encoder.d_model}
      # scheduler config override
      warmup_steps: 1000 # Updated based on ${vars.warmup_epochs} in the training script
      min_lr: 1e-6

trainer:
  max_epochs: ${vars.max_epochs}
  max_steps: -1 # computed at runtime if not set
  val_check_interval: 1.0 # Updated based on ${vars.log_interval} in the training script
  accelerator: auto
  strategy: auto
  accumulate_grad_batches: ${vars.gradient_accumulation}
  gradient_clip_val: 0.0
  precision: bf16-mixed # 16, 32, or bf16
  log_every_n_steps: 10  # Updated based on ${vars.log_interval} in the training script
  enable_progress_bar: true
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  sync_batchnorm: true
  enable_checkpointing: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager
  benchmark: false # needs to be false for models with variable-length speech input as it slows down training

exp_manager:
  exp_dir: "exps"
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "val_wer"
    mode: "min"
    save_top_k: 1
    always_save_nemo: True # saves the checkpoints as nemo files instead of PTL checkpoints

  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
